//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use chrono::Local;
use sea_orm::entity::prelude::*;
use sea_orm::ActiveValue;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "television")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    pub create_date: DateTime,
    pub update_date: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {
    fn before_save(mut self, _: bool) -> Result<Self, DbErr> {
        self.id = ActiveValue::Set(Uuid::new_v4());
        self.update_date = ActiveValue::Set(Local::now().naive_local());
        Ok(self)
    }
}
